"use strict";

exports.__esModule = true;

var _flip = require("./flip");

var _flip2 = _interopRequireDefault(_flip);

var _getFlippedElementPositions = require("./flip/getFlippedElementPositions");

var _utilities = require("./utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Flipper = function () {
  function Flipper(_ref) {
    var element = _ref.element,
        staggerConfig = _ref.staggerConfig,
        spring = _ref.spring,
        applyTransformOrigin = _ref.applyTransformOrigin,
        handleEnterUpdateDelete = _ref.handleEnterUpdateDelete,
        debug = _ref.debug,
        decisionData = _ref.decisionData;

    _classCallCheck(this, Flipper);

    this.element = element;
    this.staggerConfig = staggerConfig;
    this.spring = spring;
    this.applyTransformOrigin = applyTransformOrigin === undefined ? true : applyTransformOrigin;
    this.handleEnterUpdateDelete = handleEnterUpdateDelete;
    this.debug = debug;
    this.decisionData = decisionData;

    this.inProgressAnimations = {};
    this.flipCallbacks = {};

    this.recordBeforeUpdate = this.recordBeforeUpdate.bind(this);
    this.onUpdate = this.onUpdate.bind(this);
    this.addFlipped = this.addFlipped.bind(this);
    this.addInverted = this.addInverted.bind(this);
  }

  Flipper.prototype.recordBeforeUpdate = function recordBeforeUpdate() {
    this.snapshot = (0, _getFlippedElementPositions.getFlippedElementPositionsBeforeUpdate)({
      element: this.element,
      flipCallbacks: this.flipCallbacks,
      inProgressAnimations: this.inProgressAnimations
    });
  };

  Flipper.prototype.onUpdate = function onUpdate() {
    if (this.snapshot) {
      (0, _flip2.default)({
        cachedFlipChildrenPositions: this.snapshot.flippedElementPositions,
        cachedOrderedFlipIds: this.snapshot.cachedOrderedFlipIds,
        containerEl: this.element,
        inProgressAnimations: this.inProgressAnimations,
        flipCallbacks: this.flipCallbacks,
        applyTransformOrigin: this.applyTransformOrigin,
        spring: this.spring,
        debug: this.debug,
        staggerConfig: this.staggerConfig,
        handleEnterUpdateDelete: this.handleEnterUpdateDelete,
        decisionData: this.decisionData
      });
      this.snapshot = null;
    }
  };

  Flipper.prototype.addFlipped = function addFlipped(_ref2) {
    var element = _ref2.element,
        flipId = _ref2.flipId,
        opacity = _ref2.opacity,
        translate = _ref2.translate,
        scale = _ref2.scale,
        transformOrigin = _ref2.transformOrigin,
        spring = _ref2.spring,
        stagger = _ref2.stagger,
        onAppear = _ref2.onAppear,
        onStart = _ref2.onStart,
        onComplete = _ref2.onComplete,
        onExit = _ref2.onExit,
        shouldFlip = _ref2.shouldFlip;

    if (!element) throw new Error("no element provided");
    if (!flipId) throw new Error("No flipId provided");
    var flipConfig = {
      scale: scale,
      translate: translate,
      opacity: opacity,
      transformOrigin: transformOrigin,
      spring: spring,
      stagger: stagger
    };
    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {
      (0, _utilities.assign)(flipConfig, {
        translate: true,
        scale: true,
        opacity: true
      });
    }
    if (flipId) element.dataset.flipId = flipId;
    element.dataset.flipConfig = JSON.stringify(flipConfig);
    // finally, add callbacks
    this.flipCallbacks[flipId] = {
      shouldFlip: shouldFlip,
      onAppear: onAppear,
      onStart: onStart,
      onComplete: onComplete,
      onExit: onExit
    };
  };

  Flipper.prototype.addInverted = function addInverted(_ref3) {
    var element = _ref3.element,
        parent = _ref3.parent,
        opacity = _ref3.opacity,
        translate = _ref3.translate,
        scale = _ref3.scale,
        transformOrigin = _ref3.transformOrigin;

    if (!element) throw new Error("no element provided");
    if (!parent) throw new Error("parent must be provided");

    var inverseFlipId = parent.dataset.flipId;
    var flipConfig = {
      scale: scale,
      translate: translate,
      opacity: opacity,
      transformOrigin: transformOrigin
    };
    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {
      (0, _utilities.assign)(flipConfig, {
        translate: true,
        scale: true,
        opacity: true
      });
    }
    element.dataset.inverseFlipId = inverseFlipId;
    element.dataset.flipConfig = JSON.stringify(flipConfig);
  };

  return Flipper;
}();

exports.default = Flipper;
module.exports = exports["default"];