export var isNumber = function isNumber(x) {
  return typeof x === "number";
};

export var isFunction = function isFunction(x) {
  return typeof x === "function";
};

export var isObject = function isObject(x) {
  return Object.prototype.toString.call(x) === "[object Object]";
};

export var toArray = function toArray(arrayLike) {
  return Array.prototype.slice.apply(arrayLike);
};

export var getDuplicateValsAsStrings = function getDuplicateValsAsStrings(arr) {
  var obj = arr.reduce(function (acc, curr) {
    acc[curr] = acc[curr] ? acc[curr] + 1 : 1;
    return acc;
  }, {});
  return Object.keys(obj).filter(function (val) {
    return obj[val] > 1;
  });
};

export var assign = function assign(target) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  args.forEach(function (arg) {
    if (!arg) return;
    // Skip over if undefined or null
    for (var nextKey in arg) {
      // Avoid bugs when hasOwnProperty is shadowed
      if (Object.prototype.hasOwnProperty.call(arg, nextKey)) {
        target[nextKey] = arg[nextKey];
      }
    }
  });
  return target;
};