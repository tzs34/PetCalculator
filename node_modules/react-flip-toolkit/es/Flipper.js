function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, createContext } from "react";
import PropTypes from "prop-types";
import onFlipKeyUpdate from "./flip";
import { getFlippedElementPositionsBeforeUpdate } from "./flip/getFlippedElementPositions";

export var FlipContext = createContext("flip");
export var PortalContext = createContext("portal");

var Flipper = function (_Component) {
  _inherits(Flipper, _Component);

  function Flipper(props) {
    _classCallCheck(this, Flipper);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.inProgressAnimations = {};
    _this.flipCallbacks = {};
    return _this;
  }

  Flipper.prototype.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate(prevProps) {
    if (prevProps.flipKey !== this.props.flipKey) {
      return getFlippedElementPositionsBeforeUpdate({
        element: this.el,
        // if onExit callbacks exist here, we'll cache the DOM node
        flipCallbacks: this.flipCallbacks,
        inProgressAnimations: this.inProgressAnimations,
        portalKey: this.props.portalKey
      });
    }
    return null;
  };

  Flipper.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState, cachedData) {
    if (this.props.flipKey !== prevProps.flipKey) {
      onFlipKeyUpdate({
        cachedFlipChildrenPositions: cachedData.flippedElementPositions,
        cachedOrderedFlipIds: cachedData.cachedOrderedFlipIds,
        containerEl: this.el,
        inProgressAnimations: this.inProgressAnimations,
        flipCallbacks: this.flipCallbacks,
        applyTransformOrigin: this.props.applyTransformOrigin,
        spring: this.props.spring,
        debug: this.props.debug,
        portalKey: this.props.portalKey,
        staggerConfig: this.props.staggerConfig,
        handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,
        decisionData: {
          prev: prevProps.decisionData,
          current: this.props.decisionData
        }
      });
    }
  };

  Flipper.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        element = _props.element,
        className = _props.className,
        portalKey = _props.portalKey;

    var Element = element;

    return React.createElement(
      PortalContext.Provider,
      { value: portalKey },
      React.createElement(
        FlipContext.Provider,
        { value: this.flipCallbacks },
        React.createElement(
          Element,
          { className: className, ref: function ref(el) {
              return _this2.el = el;
            } },
          this.props.children
        )
      )
    );
  };

  return Flipper;
}(Component);

Flipper.propTypes = process.env.NODE_ENV !== "production" ? {
  flipKey: PropTypes.any,
  children: PropTypes.node.isRequired,
  spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
  applyTransformOrigin: PropTypes.bool,
  debug: PropTypes.bool,
  element: PropTypes.string,
  className: PropTypes.string,
  portalKey: PropTypes.string,
  staggerConfig: PropTypes.object,
  decisionData: PropTypes.any,
  handleEnterUpdateDelete: PropTypes.func
} : {};

Flipper.defaultProps = {
  applyTransformOrigin: true,
  element: "div"
};

export default Flipper;