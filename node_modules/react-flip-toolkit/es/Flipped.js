var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { Component, Children, cloneElement } from "react";
import PropTypes from "prop-types";
import { FlipContext, PortalContext } from "./Flipper";
import * as constants from "./constants";
import { assign, isObject } from "./utilities";

var customPropCheck = function customPropCheck(props, propName) {
  if (props.flipId && props.inverseFlipId) {
    return new Error('Please only provide one of the two: "FlipId" or "inverseFlipID"');
  } else if (props.flipId === undefined && props.inverseFlipId === undefined) {
    return new Error("Must provide either a \"FlipId\" or an \"InverseFlipId\" prop");
  } else if (props[propName] && typeof props[propName] !== "string") {
    return new Error(propName + " must be a string");
  }
};

var propTypes = {
  children: PropTypes.node.isRequired,
  inverseFlipId: customPropCheck,
  flipId: customPropCheck,
  opacity: PropTypes.bool,
  translate: PropTypes.bool,
  scale: PropTypes.bool,
  transformOrigin: PropTypes.string,
  spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
  onStart: PropTypes.func,
  onComplete: PropTypes.func,
  onAppear: PropTypes.func,
  shouldFlip: PropTypes.func,
  shouldInvert: PropTypes.func,
  onExit: PropTypes.func,
  portalKey: PropTypes.string,
  stagger: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])
  // This wrapper creates child components for the main Flipper component
};export function Flipped(_ref) {
  var _dataAttributes;

  var children = _ref.children,
      flipId = _ref.flipId,
      inverseFlipId = _ref.inverseFlipId,
      portalKey = _ref.portalKey,
      rest = _objectWithoutProperties(_ref, ["children", "flipId", "inverseFlipId", "portalKey"]);

  var child = void 0;
  try {
    child = Children.only(children);
  } catch (e) {
    throw new Error("Each Flipped component must wrap a single child");
  }
  // if nothing is being animated, assume everything is being animated
  if (!rest.scale && !rest.translate && !rest.opacity) {
    assign(rest, {
      translate: true,
      scale: true,
      opacity: true
    });
  }

  var dataAttributes = (_dataAttributes = {}, _dataAttributes[constants.DATA_FLIP_ID] = flipId, _dataAttributes[constants.DATA_INVERSE_FLIP_ID] = inverseFlipId, _dataAttributes[constants.DATA_FLIP_CONFIG] = JSON.stringify(rest), _dataAttributes);

  if (portalKey) {
    dataAttributes[constants.DATA_PORTAL_KEY] = portalKey;
  }

  return cloneElement(child, dataAttributes);
}

var FlippedWithContext = function (_Component) {
  _inherits(FlippedWithContext, _Component);

  function FlippedWithContext() {
    _classCallCheck(this, FlippedWithContext);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  FlippedWithContext.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        flipId = _props.flipId,
        shouldFlip = _props.shouldFlip,
        shouldInvert = _props.shouldInvert,
        onAppear = _props.onAppear,
        onStart = _props.onStart,
        onComplete = _props.onComplete,
        onExit = _props.onExit,
        rest = _objectWithoutProperties(_props, ["children", "flipId", "shouldFlip", "shouldInvert", "onAppear", "onStart", "onComplete", "onExit"]);

    if (rest.inverseFlipId) return React.createElement(
      Flipped,
      rest,
      children
    );
    return React.createElement(
      PortalContext.Consumer,
      null,
      function (portalKey) {
        return React.createElement(
          FlipContext.Consumer,
          null,
          function (data) {
            // if there is no surrounding Flipper component,
            // we don't want to throw an error, so check
            // that data exists and is not the default string
            if (isObject(data)) {
              data[flipId] = {
                shouldFlip: shouldFlip,
                shouldInvert: shouldInvert,
                onAppear: onAppear,
                onStart: onStart,
                onComplete: onComplete,
                onExit: onExit
              };
            }
            return React.createElement(
              Flipped,
              _extends({ flipId: flipId }, rest, { portalKey: portalKey }),
              children
            );
          }
        );
      }
    );
  };

  return FlippedWithContext;
}(Component);

FlippedWithContext.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};

export default FlippedWithContext;